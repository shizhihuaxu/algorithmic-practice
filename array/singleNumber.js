/**
 * @desc 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 *       算法应具有线性时间复杂度（单层for循环），并且不使用额外的空间 
 * @param {number[]} nums
 * @return {number}
 * 
 * 异或操作符的作用是将操作数当作是32位（一个整数4个字节，每个字节8位）比特序列， 表现为二进制的形式
 * 对于每一个比特位，当两个操作数的相对应的比特位上相异,则结果为1，如果相同则为0
 * 利用这个特点，当两个元素值相等时，32位比特位每一位都相同，所以最后的结果为0
 * 例如： 3
 * 3: 			00000000 00000000 00000000 00000011
 * 3: 			00000000 00000000 00000000 00000011
 * ------------------------------------------------
 * 异或的结果：	00000000 00000000 00000000 00000000  // 0
 * 如果两个值不相等，每个相对应的比特位，如果不同，则此对应位上的异或结果为0
 * 例如： 32 和 71
 * 35： 			00000000 00000000 00000000 00100011
 * 71： 			00000000 00000000 00000000 01000111
 * ------------------------------------------------
 * 异或的结果：  00000000 00000000 00000000 01100100  // 100
 *
 * 在异或的过程中两个相同的值最终都成为0, 然后与只出现一次的数字异或运算后的结果则为这个数字
 */
var singleNumber = function(nums) {
    for (let i = 1; i < nums.length; i++) {
        nums[0] ^= nums[i];
    }
    return nums[0];

};
let arr = [4, 1, 3, 2, 2, 3, 1]
let single = singleNumber(arr)
console.log(single) // 4